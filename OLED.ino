
//WARNING: This Font Require X-GLCD Lib.
//         You can not use it with MikroE GLCD Lib.

//Font Generated by MikroElektronika GLCD Font Creator 1.2.0.0
//MikroElektronika 2011
//http://www.mikroe.com

//GLCD FontName : Consolas26x40
//GLCD FontSize : 26 x 40 (actual is 20 x 32)
// 80 bytes per char 20 x 4... vertically scanning bytes 4 at a time

const uint8_t fontConsole[] PROGMEM =  {
  0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x3F, 0x00, 0x00, 0xFE, 0xFF, 0x01, 0x00, 0xFF, 0xFF, 0x03, 0x80, 0x1F, 0xF8, 0x07, 0xC0, 0x03, 0x1C, 0x0F, 0xC0, 0x01, 0x1E, 0x1E, 0xE0, 0x00, 0x0E, 0x1C, 0xE0, 0x00, 0x07, 0x1C, 0xE0, 0x80, 0x07, 0x1C, 0xE0, 0x80, 0x03, 0x1C, 0xE0, 0xC0, 0x01, 0x1C, 0xE0, 0xE1, 0x01, 0x0E, 0xC0, 0xE3, 0x00, 0x0F, 0x80, 0x7F, 0xE0, 0x07, 0x00, 0xFF, 0xFF, 0x03, 0x00, 0xFE, 0xFF, 0x01, 0x00, 0xF0, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char 0
  0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x1C, 0x00, 0x07, 0x00, 0x1C, 0x80, 0x03, 0x00, 0x1C, 0x80, 0x03, 0x00, 0x1C, 0xC0, 0x01, 0x00, 0x1C, 0xC0, 0x00, 0x00, 0x1C, 0xE0, 0xFF, 0xFF, 0x1F, 0xE0, 0xFF, 0xFF, 0x1F, 0xE0, 0xFF, 0xFF, 0x1F, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char 1
  0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x1C, 0x80, 0x03, 0x00, 0x1E, 0xC0, 0x03, 0x00, 0x1F, 0xC0, 0x01, 0x80, 0x1F, 0xE0, 0x01, 0xC0, 0x1F, 0xE0, 0x00, 0xE0, 0x1D, 0xE0, 0x00, 0xF0, 0x1C, 0xE0, 0x00, 0x78, 0x1C, 0xE0, 0x00, 0x3C, 0x1C, 0xE0, 0x00, 0x1E, 0x1C, 0xE0, 0x01, 0x0F, 0x1C, 0xC0, 0x83, 0x07, 0x1C, 0xC0, 0xFF, 0x03, 0x1C, 0x80, 0xFF, 0x01, 0x1C, 0x00, 0x7E, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x00,  // Code for char 2
  0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1C, 0xC0, 0x01, 0x00, 0x1C, 0xC0, 0x01, 0x00, 0x1C, 0xE0, 0x80, 0x03, 0x1C, 0xE0, 0x80, 0x03, 0x1C, 0xE0, 0x80, 0x03, 0x1C, 0xE0, 0x80, 0x03, 0x1C, 0xE0, 0x80, 0x03, 0x1C, 0xE0, 0x80, 0x03, 0x1C, 0xE0, 0xC1, 0x07, 0x0E, 0xC0, 0xE1, 0x07, 0x0E, 0xC0, 0x7F, 0x0E, 0x07, 0x80, 0x3F, 0xFE, 0x07, 0x00, 0x1F, 0xFC, 0x03, 0x00, 0x00, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char 3
  0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x00, 0xF8, 0x00, 0x00, 0x00, 0xFE, 0x00, 0x00, 0x00, 0xEF, 0x00, 0x00, 0xC0, 0xE7, 0x00, 0x00, 0xE0, 0xE3, 0x00, 0x00, 0xF8, 0xE0, 0x00, 0x00, 0x7C, 0xE0, 0x00, 0x00, 0x1F, 0xE0, 0x00, 0x80, 0x0F, 0xE0, 0x00, 0xE0, 0x03, 0xE0, 0x00, 0xE0, 0x01, 0xE0, 0x00, 0xE0, 0xFF, 0xFF, 0x1F, 0xE0, 0xFF, 0xFF, 0x1F, 0xE0, 0xFF, 0xFF, 0x1F, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x00, 0xE0, 0x00,  // Code for char 4
  0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xFF, 0x03, 0x1C, 0xE0, 0xFF, 0x03, 0x1C, 0xE0, 0xFF, 0x03, 0x1C, 0xE0, 0x80, 0x03, 0x1C, 0xE0, 0x80, 0x03, 0x1C, 0xE0, 0x80, 0x03, 0x1C, 0xE0, 0x80, 0x03, 0x1C, 0xE0, 0x80, 0x03, 0x1C, 0xE0, 0x80, 0x07, 0x0E, 0xE0, 0x00, 0x07, 0x0E, 0xE0, 0x00, 0x0F, 0x07, 0xE0, 0x00, 0xFE, 0x07, 0xE0, 0x00, 0xFE, 0x03, 0x00, 0x00, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char 5
  0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x7F, 0x00, 0x00, 0xF8, 0xFF, 0x03, 0x00, 0xFE, 0xFF, 0x07, 0x00, 0x9F, 0xC3, 0x0F, 0x80, 0x87, 0x03, 0x0E, 0xC0, 0xC3, 0x01, 0x1E, 0xC0, 0xC1, 0x01, 0x1C, 0xC0, 0xC1, 0x01, 0x1C, 0xE0, 0xC0, 0x01, 0x1C, 0xE0, 0xC0, 0x01, 0x1C, 0xE0, 0xC0, 0x01, 0x1C, 0xE0, 0xC0, 0x03, 0x0E, 0xE0, 0x80, 0x07, 0x0F, 0xE0, 0x80, 0xFF, 0x07, 0x00, 0x00, 0xFF, 0x03, 0x00, 0x00, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char 6
  0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x18, 0xE0, 0x00, 0x00, 0x1E, 0xE0, 0x00, 0x80, 0x1F, 0xE0, 0x00, 0xE0, 0x0F, 0xE0, 0x00, 0xF8, 0x03, 0xE0, 0x00, 0xFE, 0x00, 0xE0, 0x80, 0x3F, 0x00, 0xE0, 0xE0, 0x0F, 0x00, 0xE0, 0xF8, 0x03, 0x00, 0xE0, 0x7E, 0x00, 0x00, 0xE0, 0x1F, 0x00, 0x00, 0xE0, 0x07, 0x00, 0x00, 0xE0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char 7
  0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x01, 0x00, 0x1F, 0xF8, 0x07, 0x80, 0x7F, 0xFC, 0x0F, 0xC0, 0x7F, 0x1E, 0x0F, 0xC0, 0xF1, 0x0E, 0x1E, 0xE0, 0xE0, 0x07, 0x1C, 0xE0, 0xC0, 0x03, 0x1C, 0xE0, 0xC0, 0x03, 0x1C, 0xE0, 0x80, 0x03, 0x1C, 0xE0, 0xC0, 0x07, 0x1C, 0xE0, 0xE0, 0x07, 0x1C, 0xE0, 0xF1, 0x0F, 0x0E, 0xC0, 0x7F, 0x1E, 0x0F, 0x80, 0x3F, 0xFC, 0x07, 0x00, 0x1F, 0xF8, 0x07, 0x00, 0x00, 0xF0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char 8
  0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x00, 0x00, 0x00, 0xFF, 0x03, 0x1C, 0x80, 0xFF, 0x07, 0x1C, 0xC0, 0x83, 0x07, 0x1C, 0xC0, 0x01, 0x0F, 0x1C, 0xE0, 0x00, 0x0E, 0x1C, 0xE0, 0x00, 0x0E, 0x1C, 0xE0, 0x00, 0x0E, 0x1C, 0xE0, 0x00, 0x0E, 0x0E, 0xE0, 0x00, 0x0E, 0x0E, 0xE0, 0x01, 0x0E, 0x07, 0xC0, 0x03, 0x87, 0x07, 0xC0, 0x0F, 0xE7, 0x03, 0x80, 0xFF, 0xFF, 0x01, 0x00, 0xFE, 0x7F, 0x00, 0x00, 0xF8, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char 9
  0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x0F, 0x00, 0xF8, 0x81, 0x1F, 0x00, 0xF8, 0x81, 0x1F, 0x00, 0xF8, 0x81, 0x1F, 0x00, 0xF0, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char :
  0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87, 0x00, 0x00, 0x80, 0xDF, 0x00, 0x00, 0x80, 0xFF, 0x00, 0x00, 0x80, 0x7F, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char ; " , "
  0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x80, 0x7F, 0x00, 0x00, 0xC0, 0xF3, 0x00, 0x00, 0xC0, 0xE1, 0x00, 0x00, 0xE0, 0xC0, 0x01, 0x00, 0x70, 0x80, 0x03, 0x00, 0x78, 0x80, 0x07, 0x00, 0x3C, 0x00, 0x0F, 0x00, 0x1E, 0x00, 0x1E, 0x00, 0x0E, 0x00, 0x1C, 0x00, 0x04, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char <
  0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xE1, 0x00, 0x00, 0xC0, 0xE1, 0x00, 0x00, 0xC0, 0xE1, 0x00, 0x00, 0xC0, 0xE1, 0x00, 0x00, 0xC0, 0xE1, 0x00, 0x00, 0xC0, 0xE1, 0x00, 0x00, 0xC0, 0xE1, 0x00, 0x00, 0xC0, 0xE1, 0x00, 0x00, 0xC0, 0xE1, 0x00, 0x00, 0xC0, 0xE1, 0x00, 0x00, 0xC0, 0xE1, 0x00, 0x00, 0xC0, 0xE1, 0x00, 0x00, 0xC0, 0xE1, 0x00, 0x00, 0xC0, 0xE1, 0x00, 0x00, 0xC0, 0xE1, 0x00, 0x00, 0xC0, 0xE1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char =
  0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x08, 0x00, 0x0E, 0x00, 0x1C, 0x00, 0x1E, 0x00, 0x1E, 0x00, 0x3C, 0x00, 0x0F, 0x00, 0x78, 0x80, 0x07, 0x00, 0x70, 0x80, 0x03, 0x00, 0xE0, 0xC0, 0x01, 0x00, 0xC0, 0xE1, 0x00, 0x00, 0xC0, 0xF3, 0x00, 0x00, 0x80, 0x7F, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char >
  0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x0E, 0x70, 0x80, 0x3F, 0x1F, 0x70, 0x80, 0x3F, 0x1F, 0xE0, 0x80, 0x3F, 0x1F, 0xE0, 0x80, 0x03, 0x0E, 0xE0, 0x81, 0x03, 0x00, 0xC0, 0xC3, 0x03, 0x00, 0x80, 0xFF, 0x01, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char ?
  0x13, 0x00, 0xE0, 0xFF, 0x01, 0x00, 0xFE, 0xFF, 0x0F, 0xC0, 0x1F, 0x00, 0x0F, 0xE0, 0x01, 0x00, 0x18, 0x78, 0x80, 0x3F, 0x30, 0x1C, 0xF0, 0x7F, 0x30, 0x0C, 0xF8, 0xFF, 0x60, 0x06, 0x7C, 0xE0, 0x60, 0x07, 0x1E, 0xE0, 0x60, 0x03, 0x0E, 0xE0, 0x60, 0x03, 0x0E, 0x70, 0x60, 0x03, 0x8E, 0x3F, 0x60, 0x03, 0xFE, 0x7F, 0x60, 0x07, 0xFE, 0xFF, 0x20, 0x06, 0x3E, 0xE0, 0x30, 0x1E, 0x00, 0xE0, 0x10, 0x7C, 0x00, 0x7C, 0x18, 0xF0, 0xFF, 0x3F, 0x18, 0x80, 0xFF, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00,  // Code for char @
  0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x80, 0x1F, 0x00, 0x00, 0xF0, 0x1F, 0x00, 0x00, 0xFE, 0x07, 0x00, 0xC0, 0xFF, 0x00, 0x00, 0xF8, 0xEF, 0x00, 0x00, 0xFF, 0xE1, 0x00, 0xE0, 0x3F, 0xE0, 0x00, 0xE0, 0x07, 0xE0, 0x00, 0x60, 0x00, 0xE0, 0x00, 0xE0, 0x07, 0xE0, 0x00, 0xE0, 0x3F, 0xE0, 0x00, 0x80, 0xFF, 0xE1, 0x00, 0x00, 0xFC, 0xFF, 0x00, 0x00, 0xE0, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x07, 0x00, 0x00, 0xF0, 0x1F, 0x00, 0x00, 0x80, 0x1F, 0x00, 0x00, 0x00, 0x1C,  // Code for char A
  0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xFF, 0xFF, 0x1F, 0xE0, 0xFF, 0xFF, 0x1F, 0xE0, 0xFF, 0xFF, 0x1F, 0xE0, 0x80, 0x03, 0x1C, 0xE0, 0x80, 0x03, 0x1C, 0xE0, 0x80, 0x03, 0x1C, 0xE0, 0x80, 0x03, 0x1C, 0xE0, 0x80, 0x03, 0x1C, 0xE0, 0x80, 0x03, 0x1C, 0xE0, 0xC1, 0x07, 0x1C, 0xC0, 0xE1, 0x07, 0x0E, 0xC0, 0xFF, 0x0F, 0x0F, 0x80, 0x7F, 0xFE, 0x07, 0x00, 0x1F, 0xFC, 0x03, 0x00, 0x00, 0xF8, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char B
  0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x3F, 0x00, 0x00, 0xFC, 0xFF, 0x00, 0x00, 0xFE, 0xFF, 0x03, 0x00, 0x1F, 0xE0, 0x07, 0x80, 0x07, 0x80, 0x0F, 0xC0, 0x03, 0x00, 0x0F, 0xC0, 0x01, 0x00, 0x0E, 0xE0, 0x01, 0x00, 0x1C, 0xE0, 0x00, 0x00, 0x1C, 0xE0, 0x00, 0x00, 0x1C, 0xE0, 0x00, 0x00, 0x1C, 0xE0, 0x00, 0x00, 0x1C, 0xE0, 0x00, 0x00, 0x1C, 0xE0, 0x00, 0x00, 0x1C, 0xE0, 0x01, 0x00, 0x0E, 0xC0, 0x01, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char C
  0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xFF, 0xFF, 0x1F, 0xE0, 0xFF, 0xFF, 0x1F, 0xE0, 0xFF, 0xFF, 0x1F, 0xE0, 0x00, 0x00, 0x1C, 0xE0, 0x00, 0x00, 0x1C, 0xE0, 0x00, 0x00, 0x1C, 0xE0, 0x00, 0x00, 0x1C, 0xE0, 0x00, 0x00, 0x1C, 0xE0, 0x00, 0x00, 0x1C, 0xE0, 0x00, 0x00, 0x0E, 0xC0, 0x01, 0x00, 0x0E, 0xC0, 0x03, 0x00, 0x0F, 0xC0, 0x07, 0x80, 0x07, 0x80, 0x1F, 0xE0, 0x03, 0x00, 0xFF, 0xFF, 0x01, 0x00, 0xFC, 0xFF, 0x00, 0x00, 0xF0, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char D
  0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xFF, 0xFF, 0x1F, 0xE0, 0xFF, 0xFF, 0x1F, 0xE0, 0xFF, 0xFF, 0x1F, 0xE0, 0x80, 0x03, 0x1C, 0xE0, 0x80, 0x03, 0x1C, 0xE0, 0x80, 0x03, 0x1C, 0xE0, 0x80, 0x03, 0x1C, 0xE0, 0x80, 0x03, 0x1C, 0xE0, 0x80, 0x03, 0x1C, 0xE0, 0x80, 0x03, 0x1C, 0xE0, 0x80, 0x03, 0x1C, 0xE0, 0x80, 0x03, 0x1C, 0xE0, 0x80, 0x03, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char E
  0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xFF, 0xFF, 0x1F, 0xE0, 0xFF, 0xFF, 0x1F, 0xE0, 0xFF, 0xFF, 0x1F, 0xE0, 0x80, 0x03, 0x00, 0xE0, 0x80, 0x03, 0x00, 0xE0, 0x80, 0x03, 0x00, 0xE0, 0x80, 0x03, 0x00, 0xE0, 0x80, 0x03, 0x00, 0xE0, 0x80, 0x03, 0x00, 0xE0, 0x80, 0x03, 0x00, 0xE0, 0x80, 0x03, 0x00, 0xE0, 0x80, 0x03, 0x00, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char F
  0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x3F, 0x00, 0x00, 0xF8, 0xFF, 0x00, 0x00, 0xFE, 0xFF, 0x03, 0x00, 0x1F, 0xE0, 0x07, 0x80, 0x07, 0x80, 0x07, 0xC0, 0x03, 0x00, 0x0F, 0xC0, 0x01, 0x00, 0x0E, 0xC0, 0x01, 0x00, 0x1E, 0xE0, 0x00, 0x00, 0x1C, 0xE0, 0x80, 0x03, 0x1C, 0xE0, 0x80, 0x03, 0x1C, 0xE0, 0x80, 0x03, 0x1C, 0xE0, 0x80, 0x03, 0x1C, 0xE0, 0x80, 0x03, 0x1C, 0xE0, 0x80, 0xFF, 0x0F, 0xC0, 0x81, 0xFF, 0x0F, 0xC0, 0x81, 0xFF, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char G
  0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xFF, 0xFF, 0x1F, 0xE0, 0xFF, 0xFF, 0x1F, 0xE0, 0xFF, 0xFF, 0x1F, 0x00, 0x80, 0x03, 0x00, 0x00, 0x80, 0x03, 0x00, 0x00, 0x80, 0x03, 0x00, 0x00, 0x80, 0x03, 0x00, 0x00, 0x80, 0x03, 0x00, 0x00, 0x80, 0x03, 0x00, 0x00, 0x80, 0x03, 0x00, 0x00, 0x80, 0x03, 0x00, 0x00, 0x80, 0x03, 0x00, 0x00, 0x80, 0x03, 0x00, 0xE0, 0xFF, 0xFF, 0x1F, 0xE0, 0xFF, 0xFF, 0x1F, 0xE0, 0xFF, 0xFF, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char H
  0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x1C, 0xE0, 0x00, 0x00, 0x1C, 0xE0, 0x00, 0x00, 0x1C, 0xE0, 0x00, 0x00, 0x1C, 0xE0, 0x00, 0x00, 0x1C, 0xE0, 0xFF, 0xFF, 0x1F, 0xE0, 0xFF, 0xFF, 0x1F, 0xE0, 0xFF, 0xFF, 0x1F, 0xE0, 0x00, 0x00, 0x1C, 0xE0, 0x00, 0x00, 0x1C, 0xE0, 0x00, 0x00, 0x1C, 0xE0, 0x00, 0x00, 0x1C, 0xE0, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char I
  0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x1C, 0xE0, 0x00, 0x00, 0x1C, 0xE0, 0x00, 0x00, 0x1C, 0xE0, 0x00, 0x00, 0x1E, 0xE0, 0x00, 0x00, 0x0F, 0xE0, 0xFF, 0xFF, 0x0F, 0xE0, 0xFF, 0xFF, 0x03, 0xE0, 0xFF, 0xFF, 0x01, 0xE0, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char J
  0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xFF, 0xFF, 0x1F, 0xE0, 0xFF, 0xFF, 0x1F, 0xE0, 0xFF, 0xFF, 0x1F, 0x00, 0x00, 0x03, 0x00, 0x00, 0x80, 0x07, 0x00, 0x00, 0xE0, 0x1F, 0x00, 0x00, 0xF0, 0x3E, 0x00, 0x00, 0x78, 0x7C, 0x00, 0x00, 0x3C, 0xF0, 0x00, 0x00, 0x1F, 0xE0, 0x03, 0x80, 0x07, 0xC0, 0x07, 0xC0, 0x03, 0x80, 0x0F, 0xE0, 0x01, 0x00, 0x1E, 0xE0, 0x00, 0x00, 0x1C, 0x60, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00,  // Code for char K
  0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xFF, 0xFF, 0x1F, 0xE0, 0xFF, 0xFF, 0x1F, 0xE0, 0xFF, 0xFF, 0x1F, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char L
  0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x1F, 0xE0, 0xFF, 0xFF, 0x1F, 0xE0, 0xFF, 0xFF, 0x1F, 0xE0, 0x00, 0x00, 0x00, 0xE0, 0x07, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x00, 0xFC, 0x01, 0x00, 0x00, 0xE0, 0x0F, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0xE0, 0x0F, 0x00, 0x00, 0xFC, 0x01, 0x00, 0x80, 0x3F, 0x00, 0x00, 0xE0, 0x07, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x00, 0xE0, 0xFF, 0xFF, 0x1F, 0xE0, 0xFF, 0xFF, 0x1F, 0x00, 0xE0, 0xFF, 0x1F, 0x00, 0x00, 0x00, 0x00,  // Code for char M
  0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xFF, 0xFF, 0x1F, 0xE0, 0xFF, 0xFF, 0x1F, 0xE0, 0xFF, 0xFF, 0x1F, 0xE0, 0x03, 0x00, 0x00, 0xC0, 0x1F, 0x00, 0x00, 0x00, 0x7F, 0x00, 0x00, 0x00, 0xFC, 0x01, 0x00, 0x00, 0xF0, 0x07, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x00, 0xFE, 0x00, 0x00, 0x00, 0xF8, 0x03, 0x00, 0x00, 0xE0, 0x0F, 0x00, 0x00, 0x00, 0x1F, 0xE0, 0xFF, 0xFF, 0x1F, 0xE0, 0xFF, 0xFF, 0x1F, 0xE0, 0xFF, 0xFF, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char N
  0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x3F, 0x00, 0x00, 0xFC, 0xFF, 0x01, 0x00, 0xFF, 0xFF, 0x03, 0x80, 0x1F, 0xE0, 0x07, 0xC0, 0x07, 0x00, 0x0F, 0xC0, 0x01, 0x00, 0x0E, 0xE0, 0x01, 0x00, 0x1E, 0xE0, 0x00, 0x00, 0x1C, 0xE0, 0x00, 0x00, 0x1C, 0xE0, 0x00, 0x00, 0x1C, 0xE0, 0x00, 0x00, 0x1C, 0xE0, 0x01, 0x00, 0x1E, 0xC0, 0x01, 0x00, 0x0E, 0xC0, 0x03, 0x80, 0x0F, 0x80, 0x1F, 0xE0, 0x07, 0x00, 0xFF, 0xFF, 0x03, 0x00, 0xFE, 0xFF, 0x00, 0x00, 0xF0, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char O
  0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xFF, 0xFF, 0x1F, 0xE0, 0xFF, 0xFF, 0x1F, 0xE0, 0xFF, 0xFF, 0x1F, 0xE0, 0x00, 0x0E, 0x00, 0xE0, 0x00, 0x0E, 0x00, 0xE0, 0x00, 0x0E, 0x00, 0xE0, 0x00, 0x0E, 0x00, 0xE0, 0x00, 0x0E, 0x00, 0xE0, 0x00, 0x0E, 0x00, 0xE0, 0x01, 0x07, 0x00, 0xC0, 0x01, 0x07, 0x00, 0xC0, 0x83, 0x07, 0x00, 0x80, 0xFF, 0x03, 0x00, 0x00, 0xFF, 0x01, 0x00, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char P
  0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x1F, 0x00, 0x00, 0xFE, 0xFF, 0x00, 0x80, 0xFF, 0xFF, 0x01, 0xC0, 0x0F, 0xF0, 0x03, 0xE0, 0x01, 0x80, 0x07, 0xE0, 0x00, 0x00, 0x0F, 0xF0, 0x00, 0x00, 0x0F, 0x70, 0x00, 0x00, 0x7E, 0x70, 0x00, 0x00, 0x7E, 0x70, 0x00, 0x00, 0xFE, 0x70, 0x00, 0x00, 0xCE, 0xF0, 0x00, 0x00, 0x8F, 0xE0, 0x00, 0x00, 0xC7, 0xE0, 0x01, 0xC0, 0xC7, 0xC0, 0x0F, 0xF0, 0x63, 0x80, 0xFF, 0xFF, 0x01, 0x00, 0xFF, 0x7F, 0x00, 0x00, 0xF8, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char Q
  0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xFF, 0xFF, 0x1F, 0xE0, 0xFF, 0xFF, 0x1F, 0xE0, 0xFF, 0xFF, 0x1F, 0xE0, 0x00, 0x07, 0x00, 0xE0, 0x00, 0x07, 0x00, 0xE0, 0x00, 0x07, 0x00, 0xE0, 0x00, 0x07, 0x00, 0xE0, 0x00, 0x0F, 0x00, 0xE0, 0x00, 0x3F, 0x00, 0xE0, 0x81, 0xFF, 0x00, 0xC0, 0xC3, 0xFB, 0x01, 0xC0, 0xFF, 0xF1, 0x07, 0x80, 0xFF, 0xC0, 0x1F, 0x00, 0x3E, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00,  // Code for char R
  0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x00, 0x0E, 0x80, 0x7F, 0x00, 0x0E, 0x80, 0xFF, 0x00, 0x1C, 0xC0, 0xE3, 0x01, 0x1C, 0xC0, 0xC1, 0x01, 0x1C, 0xE0, 0xC0, 0x03, 0x1C, 0xE0, 0x80, 0x03, 0x1C, 0xE0, 0x80, 0x03, 0x1C, 0xE0, 0x00, 0x07, 0x1C, 0xE0, 0x00, 0x07, 0x1C, 0xE0, 0x00, 0x0F, 0x0E, 0xC0, 0x01, 0x1E, 0x0F, 0xC0, 0x01, 0xFC, 0x07, 0x80, 0x03, 0xF8, 0x07, 0x00, 0x00, 0xF0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char S
  0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x00, 0xE0, 0xFF, 0xFF, 0x1F, 0xE0, 0xFF, 0xFF, 0x1F, 0xE0, 0xFF, 0xFF, 0x1F, 0xE0, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char T
  0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xFF, 0xFF, 0x00, 0xE0, 0xFF, 0xFF, 0x03, 0xE0, 0xFF, 0xFF, 0x07, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x80, 0x0F, 0xE0, 0xFF, 0xFF, 0x07, 0xE0, 0xFF, 0xFF, 0x03, 0xE0, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char U
  0x14, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x00, 0xE0, 0x07, 0x00, 0x00, 0xE0, 0x3F, 0x00, 0x00, 0xC0, 0xFF, 0x03, 0x00, 0x00, 0xFE, 0x1F, 0x00, 0x00, 0xE0, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x07, 0x00, 0x00, 0xF8, 0x1F, 0x00, 0x00, 0x80, 0x1F, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x80, 0x1F, 0x00, 0x00, 0xF0, 0x1F, 0x00, 0x00, 0xFF, 0x03, 0x00, 0xE0, 0x7F, 0x00, 0x00, 0xFC, 0x0F, 0x00, 0x80, 0xFF, 0x01, 0x00, 0xE0, 0x3F, 0x00, 0x00, 0xE0, 0x07, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x00,  // Code for char V
  0x14, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x07, 0x00, 0x00, 0xE0, 0xFF, 0x7F, 0x00, 0xE0, 0xFF, 0xFF, 0x1F, 0x00, 0xF0, 0xFF, 0x1F, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x80, 0x1F, 0x00, 0x00, 0xF8, 0x07, 0x00, 0x80, 0x7F, 0x00, 0x00, 0xE0, 0x07, 0x00, 0x00, 0xE0, 0x07, 0x00, 0x00, 0xC0, 0x3F, 0x00, 0x00, 0x00, 0xFE, 0x01, 0x00, 0x00, 0xF0, 0x0F, 0x00, 0x00, 0x80, 0x1F, 0x00, 0x00, 0x00, 0x1E, 0x00, 0xE0, 0xFF, 0x1F, 0xE0, 0xFF, 0xFF, 0x1F, 0xE0, 0xFF, 0x7F, 0x00, 0xE0, 0x07, 0x00, 0x00,  // Code for char W
  0x14, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x18, 0x60, 0x00, 0x00, 0x1E, 0xE0, 0x01, 0x00, 0x1F, 0xE0, 0x07, 0xC0, 0x0F, 0xC0, 0x0F, 0xF0, 0x07, 0x00, 0x3F, 0xF8, 0x01, 0x00, 0x7E, 0x7E, 0x00, 0x00, 0xF8, 0x3F, 0x00, 0x00, 0xE0, 0x0F, 0x00, 0x00, 0xE0, 0x0F, 0x00, 0x00, 0xF8, 0x3F, 0x00, 0x00, 0x7E, 0x7E, 0x00, 0x00, 0x3F, 0xF8, 0x01, 0xC0, 0x0F, 0xF0, 0x07, 0xE0, 0x07, 0xC0, 0x0F, 0xE0, 0x01, 0x00, 0x1F, 0x60, 0x00, 0x00, 0x1E, 0x20, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x10,  // Code for char X
  0x14, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x00, 0xE0, 0x01, 0x00, 0x00, 0xE0, 0x07, 0x00, 0x00, 0xC0, 0x1F, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0xFE, 0x00, 0x00, 0x00, 0xF8, 0x03, 0x00, 0x00, 0xE0, 0x07, 0x00, 0x00, 0x80, 0xFF, 0x1F, 0x00, 0x00, 0xFE, 0x1F, 0x00, 0x80, 0xFF, 0x1F, 0x00, 0xE0, 0x07, 0x00, 0x00, 0xF0, 0x03, 0x00, 0x00, 0xFC, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0xC0, 0x1F, 0x00, 0x00, 0xE0, 0x07, 0x00, 0x00, 0xE0, 0x01, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x00,  // Code for char Y
  0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x1C, 0xE0, 0x00, 0x00, 0x1E, 0xE0, 0x00, 0x80, 0x1F, 0xE0, 0x00, 0xC0, 0x1F, 0xE0, 0x00, 0xF0, 0x1D, 0xE0, 0x00, 0xFC, 0x1C, 0xE0, 0x00, 0x3E, 0x1C, 0xE0, 0x80, 0x1F, 0x1C, 0xE0, 0xC0, 0x07, 0x1C, 0xE0, 0xF0, 0x01, 0x1C, 0xE0, 0xFC, 0x00, 0x1C, 0xE0, 0x3E, 0x00, 0x1C, 0xE0, 0x1F, 0x00, 0x1C, 0xE0, 0x07, 0x00, 0x1C, 0xE0, 0x01, 0x00, 0x1C, 0xE0, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char Z
  0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0x00, 0x00, 0xE0, 0x07, 0x00, 0x00, 0xE0, 0x07, 0x00, 0x00, 0xE0, 0x07, 0x00, 0x00, 0xE0, 0x07, 0x00, 0x00, 0xE0, 0x07, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char [
  0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x7E, 0x00, 0x00, 0x00, 0xFC, 0x01, 0x00, 0x00, 0xE0, 0x0F, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x00, 0xFE, 0x01, 0x00, 0x00, 0xF0, 0x07, 0x00, 0x00, 0xC0, 0x3F, 0x00, 0x00, 0x00, 0xFE, 0x00, 0x00, 0x00, 0xF8, 0x03, 0x00, 0x00, 0xC0, 0x1F, 0x00, 0x00, 0x00, 0x7F, 0x00, 0x00, 0x00, 0x7C, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char BackSlash
  0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0xE0, 0x07, 0x00, 0x00, 0xE0, 0x07, 0x00, 0x00, 0xE0, 0x07, 0x00, 0x00, 0xE0, 0x07, 0x00, 0x00, 0xE0, 0x07, 0x00, 0x00, 0xE0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char ]
  0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x03, 0x00, 0x00, 0x80, 0x03, 0x00, 0x00, 0x80, 0x03, 0x00, 0x00, 0x80, 0x03, 0x00, 0x00, 0x80, 0x03, 0x00, 0x00, 0x80, 0x03, 0x00, 0x00, 0x80, 0x03, 0x00, 0x00, 0x80, 0x03, 0x00, 0x00, 0x80, 0x03, 0x00, 0x00, 0x80, 0x03, 0x00, 0x00, 0x80, 0x03, 0x00, 0x00, 0x80, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char ^ (negsign)
  0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x80, 0x1F, 0x00, 0x00, 0x80, 0x1F, 0x00, 0x00, 0x80, 0x1F, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char _ (period_
  0x13, 0x00, 0x00, 0x00, 0x00, 0x4C, 0xF0, 0xFF, 0x07, 0x92, 0x10, 0x00, 0x04, 0x92, 0x10, 0x00, 0x00, 0x64, 0x7C, 0x00, 0x0E, 0x00, 0x38, 0x00, 0x11, 0xFE, 0x10, 0x1C, 0x15, 0x92, 0x00, 0x12, 0x15, 0x92, 0xFE, 0x17, 0x15, 0x00, 0x02, 0x15, 0x15, 0xFE, 0x7A, 0x13, 0x15, 0x04, 0x7A, 0x15, 0x15, 0x18, 0x7A, 0x15, 0x15, 0xFE, 0x7A, 0x17, 0x15, 0x00, 0x7A, 0x15, 0x15, 0xFE, 0x02, 0x13, 0x15, 0x82, 0xFE, 0x15, 0x11, 0x82, 0x00, 0x12, 0x0E, 0x7C, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00,  //Code for char ` (send icon)
  0x0F, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0xF8, 0x00, 0x00, 0x00, 0x8C, 0x01, 0x00, 0x00, 0x8C, 0x01, 0x00, 0x1E, 0xF8, 0x00, 0xE0, 0x1F, 0x70, 0x00, 0xFE, 0x01, 0x00, 0xE0, 0x1F, 0x00, 0x00, 0xFE, 0x01, 0x00, 0xE0, 0x1F, 0x00, 0x07, 0xFC, 0x01, 0x80, 0x0F, 0x3C, 0x00, 0xC0, 0x18, 0x00, 0x00, 0xC0, 0x18, 0x00, 0x00, 0x80, 0x0F, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char a  " % "
  0x13, 0x00, 0x00, 0x00, 0x00, 0x98, 0xF8, 0xFF, 0x1F, 0x24, 0xFD, 0xFF, 0x3F, 0x24, 0xFD, 0xFF, 0x3F, 0x24, 0xFD, 0x07, 0x38, 0xC8, 0xFC, 0x07, 0x38, 0x00, 0xFC, 0x07, 0x38, 0x80, 0xFD, 0x0F, 0x38, 0x80, 0xFD, 0x0F, 0x38, 0x00, 0xFC, 0x0F, 0x38, 0x00, 0xFC, 0x0F, 0x38, 0xFC, 0xFD, 0x0F, 0x38, 0x04, 0xFD, 0x0F, 0x38, 0x04, 0xFD, 0x0F, 0x38, 0x04, 0xF5, 0x0F, 0x38, 0xF8, 0xF8, 0xFF, 0x3F, 0x00, 0xD0, 0xFF, 0x3F, 0x80, 0xE1, 0xFF, 0x1F, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // Code for char b (SD ICON)
};




const uint8_t font5x7[] PROGMEM = { // space is at the bottom (=2 spaces with double height letters)
  // this is 475, enuff for eeprom =>548

  0x00, 0x00, 0x00, 0x00, 0x00, // (space)    by GLCD FONT CREATOR
  0x00, 0x00, 0x5F, 0x00, 0x00, // !
  0x00, 0x07, 0x00, 0x07, 0x00, // "
  0x14, 0x7F, 0x14, 0x7F, 0x14, // #
  0x24, 0x2A, 0x7F, 0x2A, 0x12, // $
  0x23, 0x13, 0x08, 0x64, 0x62, // %
  0x36, 0x49, 0x55, 0x22, 0x50, // &
  0x00, 0x05, 0x03, 0x00, 0x00, // '
  0x00, 0x1C, 0x22, 0x41, 0x00, // (
  0x00, 0x41, 0x22, 0x1C, 0x00, // )
  0x08, 0x2A, 0x1C, 0x2A, 0x08, // *
  0x08, 0x08, 0x3E, 0x08, 0x08, // +
  0x00, 0x50, 0x30, 0x00, 0x00, // ,
  0x08, 0x08, 0x08, 0x08, 0x08, // -
  0x00, 0x60, 0x60, 0x00, 0x00, // .
  0x20, 0x10, 0x08, 0x04, 0x02, // /
  0x3E, 0x51, 0x49, 0x45, 0x3E, // 0
  0x00, 0x42, 0x7F, 0x40, 0x00, // 1
  0x42, 0x61, 0x51, 0x49, 0x46, // 2
  0x21, 0x41, 0x45, 0x4B, 0x31, // 3
  0x18, 0x14, 0x12, 0x7F, 0x10, // 4
  0x27, 0x45, 0x45, 0x45, 0x39, // 5
  0x3C, 0x4A, 0x49, 0x49, 0x30, // 6
  0x01, 0x71, 0x09, 0x05, 0x03, // 7
  0x36, 0x49, 0x49, 0x49, 0x36, // 8
  0x06, 0x49, 0x49, 0x29, 0x1E, // 9
  0x00, 0x36, 0x36, 0x00, 0x00, // :
  0x00, 0x56, 0x36, 0x00, 0x00, // ;
  0x00, 0x08, 0x14, 0x22, 0x41, // <
  0x14, 0x14, 0x14, 0x14, 0x14, // =
  0x00, 0x3F, 0x1E, 0x0C, 0x00, // >  0x41, 0x22, 0x14, 0x08, 0x00, // > ARROW
  0x02, 0x01, 0x51, 0x09, 0x06, // ?
  0x32, 0x49, 0x79, 0x41, 0x3E, // @
  0x7E, 0x11, 0x11, 0x11, 0x7E, // A
  0x7F, 0x49, 0x49, 0x49, 0x36, // B
  0x3E, 0x41, 0x41, 0x41, 0x22, // C
  0x7F, 0x41, 0x41, 0x22, 0x1C, // D
  0x7F, 0x49, 0x49, 0x49, 0x41, // E
  0x7F, 0x09, 0x09, 0x01, 0x01, // F
  0x3E, 0x41, 0x41, 0x51, 0x32, // G
  0x7F, 0x08, 0x08, 0x08, 0x7F, // H
  0x00, 0x41, 0x7F, 0x41, 0x00, // I
  0x20, 0x40, 0x41, 0x3F, 0x01, // J
  0x7F, 0x08, 0x14, 0x22, 0x41, // K
  0x7F, 0x40, 0x40, 0x40, 0x40, // L
  0x7F, 0x02, 0x04, 0x02, 0x7F, // M
  0x7F, 0x04, 0x08, 0x10, 0x7F, // N
  0x3E, 0x41, 0x41, 0x41, 0x3E, // O
  0x7F, 0x09, 0x09, 0x09, 0x06, // P
  0x3E, 0x41, 0x51, 0x21, 0x5E, // Q
  0x7F, 0x09, 0x19, 0x29, 0x46, // R
  0x46, 0x49, 0x49, 0x49, 0x31, // S
  0x01, 0x01, 0x7F, 0x01, 0x01, // T
  0x3F, 0x40, 0x40, 0x40, 0x3F, // U
  0x1F, 0x20, 0x40, 0x20, 0x1F, // V
  0x7F, 0x20, 0x18, 0x20, 0x7F, // W
  0x63, 0x14, 0x08, 0x14, 0x63, // X
  0x03, 0x04, 0x78, 0x04, 0x03, // Y
  0x61, 0x51, 0x49, 0x45, 0x43, // Z
  0x00, 0x00, 0x7F, 0x41, 0x41, // [
  0x02, 0x04, 0x08, 0x10, 0x20, // "\"
  0x41, 0x41, 0x7F, 0x00, 0x00, // ]
  0x04, 0x02, 0x01, 0x02, 0x04, // ^
  0x40, 0x40, 0x40, 0x40, 0x40, // _
  0x00, 0x01, 0x02, 0x04, 0x00, // `
  0x20, 0x54, 0x54, 0x54, 0x78, // a
  0x7F, 0x48, 0x44, 0x44, 0x38, // b
  0x38, 0x44, 0x44, 0x44, 0x20, // c
  0x38, 0x44, 0x44, 0x48, 0x7F, // d
  0x38, 0x54, 0x54, 0x54, 0x18, // e
  0x08, 0x7E, 0x09, 0x01, 0x02, // f
  0x08, 0x14, 0x54, 0x54, 0x3C, // g
  0x7F, 0x08, 0x04, 0x04, 0x78, // h
  0x00, 0x44, 0x7D, 0x40, 0x00, // i
  0x20, 0x40, 0x44, 0x3D, 0x00, // j
  0x00, 0x7F, 0x10, 0x28, 0x44, // k
  0x00, 0x41, 0x7F, 0x40, 0x00, // l
  0x7C, 0x04, 0x18, 0x04, 0x78, // m
  0x7C, 0x08, 0x04, 0x04, 0x78, // n
  0x38, 0x44, 0x44, 0x44, 0x38, // o
  0x7C, 0x14, 0x14, 0x14, 0x08, // p
  0x08, 0x14, 0x14, 0x18, 0x7C, // q
  0x7C, 0x08, 0x04, 0x04, 0x08, // r
  0x48, 0x54, 0x54, 0x54, 0x20, // s
  0x04, 0x3F, 0x44, 0x40, 0x20, // t
  0x3C, 0x40, 0x40, 0x20, 0x7C, // u
  0x1C, 0x20, 0x40, 0x20, 0x1C, // v
  0x3C, 0x40, 0x30, 0x40, 0x3C, // w
  0x44, 0x28, 0x10, 0x28, 0x44, // x
  0x0C, 0x50, 0x50, 0x50, 0x3C, // y
  0x44, 0x64, 0x54, 0x4C, 0x44, // z
  0x00, 0x08, 0x36, 0x41, 0x00, // {
  0x00, 0x00, 0x7F, 0x00, 0x00, // |
  0x00, 0x41, 0x36, 0x08, 0x00, // }
  0x14, 0x3E, 0x55, 0x41, 0x22, // â‚¬

  // 0x08, 0x08, 0x2A, 0x1C, 0x08, // -> (ALT + 0134) â€ 
  // 0x08, 0x1C, 0x2A, 0x08, 0x08, // <- (ALT + 0135) â€¡
  // 0x00, 0x00, 0x07, 0x05, 0x07  // Â°

};








#define BLACK                          0 ///< Draw 'off' pixels
#define WHITE                          1 ///< Draw 'on' pixels
#define INVERSE                        2 ///< Invert pixels

#define SSD1306_MEMORYMODE          0x20 ///< See datasheet
#define SSD1306_COLUMNADDR          0x21 ///< See datasheet
#define SSD1306_PAGEADDR            0x22 ///< See datasheet
#define SSD1306_SETCONTRAST         0x81 ///< See datasheet
#define SSD1306_CHARGEPUMP          0x8D ///< See datasheet
#define SSD1306_SEGREMAP            0xA0 ///< See datasheet
#define SSD1306_DISPLAYALLON_RESUME 0xA4 ///< See datasheet
#define SSD1306_DISPLAYALLON        0xA5 ///< Not currently used
#define SSD1306_NORMALDISPLAY       0xA6 ///< See datasheet
#define SSD1306_INVERTDISPLAY       0xA7 ///< See datasheet
#define SSD1306_SETMULTIPLEX        0xA8 ///< See datasheet
#define SSD1306_DISPLAYOFF          0xAE ///< See datasheet
#define SSD1306_DISPLAYON           0xAF ///< See datasheet
#define SSD1306_COMSCANINC          0xC0 ///< Not currently used
#define SSD1306_COMSCANDEC          0xC8 ///< See datasheet
#define SSD1306_SETDISPLAYOFFSET    0xD3 ///< See datasheet
#define SSD1306_SETDISPLAYCLOCKDIV  0xD5 ///< See datasheet
#define SSD1306_SETPRECHARGE        0xD9 ///< See datasheet
#define SSD1306_SETCOMPINS          0xDA ///< See datasheet
#define SSD1306_SETVCOMDETECT       0xDB ///< See datasheet

#define SSD1306_SETLOWCOLUMN        0x00 ///< Not currently used
#define SSD1306_SETHIGHCOLUMN       0x10 ///< Not currently used
#define SSD1306_SETSTARTLINE        0x40 ///< See datasheet

#define SSD1306_EXTERNALVCC         0x01 ///< External display voltage source
#define SSD1306_SWITCHCAPVCC        0x02 ///< Gen. display voltage from 3.3V

#define SSD1306_RIGHT_HORIZONTAL_SCROLL              0x26 ///< Init rt scroll
#define SSD1306_LEFT_HORIZONTAL_SCROLL               0x27 ///< Init left scroll
#define SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29 ///< Init diag scroll
#define SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL  0x2A ///< Init diag scroll
#define SSD1306_DEACTIVATE_SCROLL                    0x2E ///< Stop scroll
#define SSD1306_ACTIVATE_SCROLL                      0x2F ///< Start scroll
#define SSD1306_SET_VERTICAL_SCROLL_AREA             0xA3 ///< Set scroll range

#define HEIGHT  0x20
#define WIDTH   0x80

//#define HEIGHT  64
//#define WIDTH   128
void oled() {
  // Init sequence
  static const uint8_t PROGMEM init1[] = {
    SSD1306_DISPLAYOFF,                   // 0xAE
    SSD1306_SETDISPLAYCLOCKDIV,           // 0xD5
    0xA0,//0xA0, // 0x80,                                 // the suggested ratio 0x80... mainly to control scroll speed
    SSD1306_SETMULTIPLEX,
    0x3f
  };               // 0xA8

  ssd1306_commandList(init1, sizeof(init1));
  ssd1306_command1(HEIGHT - 1);

  static const uint8_t PROGMEM init2[] = {
    SSD1306_SETDISPLAYOFFSET,             // 0xD3
    0x00,                                  // no offset
    SSD1306_SETSTARTLINE | 0x0,           // line #0
    SSD1306_CHARGEPUMP,
    0x14,
    0xAF
  };                                                            // 0x8D

  ssd1306_commandList(init2, sizeof(init2));

  //ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
  //ssd1306_command1(0x14);

  static const uint8_t PROGMEM init3[] = {
    SSD1306_MEMORYMODE,                   // 0x20
    0x01,                                                           // 0x0 act like ks0108
    SSD1306_SEGREMAP | 0x1,
    SSD1306_COMSCANDEC
  };

  ssd1306_commandList(init3, sizeof(init3));

  // if ((WIDTH == 128) && (HEIGHT == 64)) {
  static const uint8_t PROGMEM init4b[] = {
    SSD1306_SETCOMPINS,                 // 0xDA
    0x02, //0x12,
    SSD1306_SETCONTRAST,
    0x8f, // 0xFF,
    SSD1306_SETPRECHARGE, //F1 is brightest
    0xF1,
    //   SSD1306_COLUMNADDR ,
    //    0x00, 0x7f,
    //    SSD1306_PAGEADDR,
    //    0x00, 0x07

  };              // 0x81
  ssd1306_commandList(init4b, sizeof(init4b));
  // ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF);
  //  }


  // ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
  //ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
  static const uint8_t PROGMEM init5[] = {
    SSD1306_SETVCOMDETECT,               // 0xDB
    0x40, //was 40, works best! NOT EVEN IN DATASHEET!
    SSD1306_DISPLAYALLON_RESUME,         // 0xA4
    SSD1306_NORMALDISPLAY,               // 0xA6
    // SSD1306_ACTIVATE_SCROLL,  //
    SSD1306_DEACTIVATE_SCROLL,
    SSD1306_DISPLAYON
  };                 // Main screen turn on
  ssd1306_commandList(init5, sizeof(init5));


  static const uint8_t PROGMEM init6[] = {
    SSD1306_LEFT_HORIZONTAL_SCROLL,
    0x00,
    0x00,   //start page
    0x07,   //frames (see datasheet) can be used @ 25 with frequency controlling speed
    0x07,  //end page
    0x00,  //vertical scroll offset
    0xFF
  };
  ssd1306_commandList(init6, sizeof(init6));


}

//============================================================================================================


void ssd1306_command1(uint8_t c) { // Co = 0, D/C = 0
  Wire.beginTransmission(0x3C); Wire.write((uint8_t)0x00); Wire.write(c); WireendTransmission();
}



void ssd1306_commandList(const uint8_t *c, uint8_t n) {

  Wire.beginTransmission(0x3C);
  Wire.write((uint8_t)0x00); // Co = 0, D/C = 0
  bytesOut = 1;
  while (n--) {
    //  if (bytesOut >= 32) {
    wireReBuff(30);  // Wire.endTransmission(); Wire.beginTransmission(0x3C); Wire.write((uint8_t)0x00); bytesOut = 1; // Co = 0, D/C = 0
    //   }
    Wire.write(pgm_read_byte(c++));
    bytesOut++;
  }
  WireendTransmission();

}


void WireendTransmission() {
  Wire.endTransmission();
}
void wireReBuff(byte gt) {
  if (bytesOut >= gt) {
    WireendTransmission(); Wire.beginTransmission(0x3C); Wire.write(0B01000000); bytesOut = 1;
  }
}

void wireBegin() {
  Wire.beginTransmission(0x3C);//OLED slave address = 0 (or 3D)
  Wire.write(0B01000000); // D/C#  = data or command flag (in control byte)..i guess you just shove data in now (after setting start line?)
  bytesOut = 1;
}

void wireWrite(byte w) {
  Wire.write(w); bytesOut++;
}
void Wirewrite(byte w) {
  Wire.write(w); // this on doesn't inc bytes out!
}


void OLED_UD(int count, byte cs, byte ce, byte ps, byte pe) {     //update whole page...? no way, takes too much memory!..read chars from progmem arrays
  OLED_pointTo(cs, ce, ps,  pe); // put here as all UD's use it!
  wireBegin(); OLEDbusy = true;
  byte k = 0; byte s = 0;
  for (int i = 0; i < count; i++) {
    //   if (bytesOut >= 30) {
    wireReBuff(30);// if (count < 1024) loop(); //call loop if not in menus...change this to menu flag etc..
    //    }
    bytesOut++; k = 0;
    //    if (lowFid == 1 && (i & 0x01) == 0) { //erase for keyboard display. Make bar across top
    //      k = 1; if (s == 0) k = 3; //make notches every C note
    //      s++; if (s > 11) s = 0;
    //    }
    Wirewrite(k);
  }
  WireendTransmission(); OLEDbusy = false;  // stop transmitting
}




void OLED_pointTo(byte cs, byte ce, byte ps, byte pe) { //set column and page (0-127) (0-7) col start/end page start/end . col is left right, page up down
  Wire.beginTransmission(0x3C);//OLED slave address
  Wirewrite(0x00); Wirewrite(0x21); Wirewrite(cs); Wirewrite(ce);
  WireendTransmission();     // stop transmitting                                <<<<<<<<<<<<<<must be separate!!!!
  Wire.beginTransmission(0x3C);//OLED slave address
  Wirewrite(0x00); Wirewrite(0x22); Wirewrite(ps); Wirewrite(pe);
  WireendTransmission();     // stop transmitting
}






void OLEDwerds(String werd, byte col, byte page, byte L) { //BIG CHARS
  byte p = page & 0x07; int limit = col; //<<in this 128x32 OLED these chars use entire display!
  int w = 0;//for counting colums (/4 then sets curse var)
  byte Lsize = 4;
  OLED_pointTo(col, 127, p + 4, p + 7); //lower ram is displayed !!!
  wireBegin();
  if (L == 0) L = werd.length();
  for (byte i = 0; i < L; i++) {
    int let = (werd.charAt(i) - 48) * 81; Lsize = pgm_read_byte_near(fontConsole + let); Lsize *= 4; let += 1; // letter is 1+ (20 x 4)  and len is first so skip!
    if (let < 0) {
      if (werd.charAt(i) == 46) {
        let = 47 * 81; let += 1; Lsize = 28; //for period/decimal!!
      } else {
        if (werd.charAt(i) == 45) { // for neg sign (45)->>94->>46
          let = 46 * 81; let += 1; Lsize = 52;
        } else {
          //Lsize = 24; //for space (6 pixels)
        }

      }
    }
    for (int k = let; k < let + 80; k++) {
      byte data = pgm_read_byte_near(fontConsole + k);
      if (i >= werd.length() || let < 0) data = 0;
      wireReBuff(30); // Wire.endTransmission(); Wire.beginTransmission(0x3C); Wire.write(0B01000000); bytesOut = 1;
      bytesOut++; limit++; if (limit > 511)break;

      if (!(page & 0x80)) {
        Wirewrite(data);
      } else {
        Wirewrite(~(data));
      }
      w++;
      Lsize--; if (Lsize == 0) break; //so letters can scrunch together
    }
  }
  WireendTransmission();     // stop transmitting
  curse += w / 4;
}




void OLEDwerdsSm(String werd, byte col, byte page, byte L) { //5x7 chars so 6 per, single page
  byte p = page & 0x07; byte limit = col;
  OLED_pointTo(col, 127, p + 4, p + 4);
  wireBegin();
  if (L == 0) L = werd.length();

  for (byte i = 0; i < L; i++) {
    int let = (werd.charAt(i) - 32) * 5; // letter
    for (int k = let; k < let + 6; k++) {
      byte data = pgm_read_byte_near(font5x7 + k);
      //  byte data=EEPROM.read(553+k);
      if (i >= werd.length()) data = 0;
      if (k == let + 5) data = 0; //make space
      //    if (fromKnob && i >= werd.length()) data = 0; // make rest blank
      // Serial.print(data, HEX); Serial.print(" ");
      //    if (bytesOut >= 30) {
      wireReBuff(30); // Wire.endTransmission(); Wire.beginTransmission(0x3C); Wire.write(0B01000000); bytesOut = 1;
      //    }
      bytesOut++; limit++; if (limit > 127)break;
      if (!(page & 0x80)) {
        Wirewrite(data);
      } else {
        Wirewrite(~(data));
      }
    }
  }
  WireendTransmission();     // stop transmitting
}



void standBy() { //display config # and user name when standby called every 10mS
  if (menuLev != 0)return;
  if (timeShow == 0) {
    timeShow = 5;
    OLED_UD(512, 0, 127, 4, 7); //full screen
    String t = "T:"; if (hours < 10) t += " ";
    t += String(hours) + ":";
    if (mins < 10)t += "0";
    t += String(mins);
    OLEDwerds(t, 0, 0, 0);
    stbyStep = -200;
  } else {
    stbyStep++;
    if (stbyStep == 100) {
      OLEDwerds("USER:", 0, 0, 0);
      String un = String(user + 1);
      if (user < 9) {
        un = "0" + un;
      }
      OLEDwerds(un, 80, 0, 0);
      timeShow--;
    }
    if (stbyStep > 399 && stbyStep < 1040) {
      if (stbyStep == 400) {
        OLED_UD(512, 0, 127, 4, 7); //full screen
        //Serial.println(name);
      }
      nameStep++;
      if (nameStep == 25) {
        nameStep = 0;
        String ars = name; ars = "      " + ars; ars += afterSpaces; //
        OLEDwerds(ars.substring(nameScroll, nameScroll + 9), 0, 0, 0);
        nameScroll++;
        if (nameScroll > 22) {
          nameScroll = 0;  nameStep = 0; stbyStep = 1025;
        }
      }
    }
    if (stbyStep == 1040) OLEDwerds("INCLOCK", 0, 0, 0);
    if (stbyStep == 1140)  OLED_UD(512, 0, 127, 4, 7); //full screen
    if (stbyStep == 1150) {
      String t = "ICK:";
      if ((clk1[0] & 0x01) || (clk1[1] & 0x01) || (clk1[2] & 0x01)) t += "1";
      if ((clk2[0] & 0x01) || (clk2[1] & 0x01) || (clk2[2] & 0x01)) t += "2";
      if ((clk3[0] & 0x01) || (clk3[1] & 0x01) || (clk3[2] & 0x01)) t += "3";
      OLEDwerds(t, 0, 0, 0);
    }
    if (stbyStep == 1300) {
      stbyStep = 0; OLED_UD(512, 0, 127, 4, 7); //full screen
    }
  }
}


void arrow(byte c) { //tiny arrow to select menu items
  OLED_UD(16, 0, 3, 4, 7);//clearColumn
  OLED_pointTo(0, 3, c + 4, c + 4 );
  wireBegin();  a[0] = 0xff; a[1] = 0x7e; a[2] = 0x3c; a[3] = 0x18;
  wireReBuff(20);
  for (byte i = 0; i < 4; i++) {
    wireWrite(a[i]);
  }
  WireendTransmission();     // stop transmitting
}

void splash() {
  OLED_UD(512, 0, 127, 4, 7);//clearColumn
  OLED_pointTo(0, 127, 4, 7 );
  for (byte k = 0; k < 20; k++) {
    OLED_pointTo(0, 127, 4, 7 );
    wireBegin(); wireReBuff(20);
    byte w = 1; byte h = random(255); byte ww = 1;
    for ( int i = 0; i < 512; i++) {
      wireWrite(ww); wireReBuff(30); bytesOut++;
      ww = w << (h / 24); h += random(h + 2 - k);
    }
    WireendTransmission();     // stop transmitting
    for ( int i = 0; i < 30; i++) {
      OLEDwerdsSm("o", random(90) + 30, random(4), 1); delay(2);
    }
    delay(40);
  }
  for ( int i = 0; i < 512; i++) {
    OLEDwerdsSm(" ", random(128), random(4), 1); delay(2);
  }
}
